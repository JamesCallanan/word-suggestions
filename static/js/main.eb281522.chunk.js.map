{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","rhymeWords","setRhymeWords","meansLikeWords","setMeansLikeWords","soundsLikeWords","setSoundsLikeWords","triggerWords","setTriggerWords","wordRef","useRef","className","ref","onClick","word","current","value","datamuse","request","then","json","map","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4VA8DeA,MAzDf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAE+BF,mBAAS,IAFxC,mBAENG,EAFM,KAEUC,EAFV,OAGiCJ,mBAAS,IAH1C,mBAGNK,EAHM,KAGWC,EAHX,OAI2BN,mBAAS,IAJpC,mBAINO,EAJM,KAIQC,EAJR,KAMPC,EAAUC,mBAkBhB,OACE,qCACE,sBAAKC,UAAU,QAAf,UACE,wDACA,uBAAOC,IAAKH,IACZ,wBAAQI,QArBM,WAClB,IAAMC,EAAOL,EAAQM,QAAQC,MAChB,KAATF,IACJG,IACGC,QAAQ,YAAcJ,EAAO,UAC7BK,MAAK,SAACC,GAAD,OAAUhB,EAAkBgB,MACpCH,IACGC,QAAQ,YAAcJ,EAAO,UAC7BK,MAAK,SAACC,GAAD,OAAUd,EAAmBc,MACrCH,IACGC,QAAQ,iBAAmBJ,EAAO,UAClCK,MAAK,SAACC,GAAD,OAAUlB,EAAckB,MAChCH,IACGC,QAAQ,iBAAmBJ,EAAO,UAClCK,MAAK,SAACC,GAAD,OAAUZ,EAAgBY,QAO9B,yBAEF,sBAAKT,UAAU,YAAf,UACE,8BACGJ,EAAac,KAAI,SAACP,EAAMQ,GAAP,OAChB,6BAAaR,EAAKA,MAATQ,QAGb,8BACGrB,EAAWoB,KAAI,SAACP,EAAMQ,GAAP,OACd,6BAAaR,EAAKA,MAATQ,QAGb,8BACGjB,EAAgBgB,KAAI,SAACP,EAAMQ,GAAP,OACnB,6BAAaR,EAAKA,MAATQ,QAGb,8BACGnB,EAAekB,KAAI,SAACP,EAAMQ,GAAP,OAClB,6BAAaR,EAAKA,MAATQ,eC1CNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eb281522.chunk.js","sourcesContent":["//import logo from \"./logo.svg\";\nimport datamuse from \"datamuse\";\nimport { useRef, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [rhymeWords, setRhymeWords] = useState([]);\n  const [meansLikeWords, setMeansLikeWords] = useState([]);\n  const [soundsLikeWords, setSoundsLikeWords] = useState([]);\n  const [triggerWords, setTriggerWords] = useState([]);\n\n  const wordRef = useRef();\n\n  const getWordInfo = () => {\n    const word = wordRef.current.value;\n    if (word === \"\") return;\n    datamuse\n      .request(\"words?ml=\" + word + \"&max=5\")\n      .then((json) => setMeansLikeWords(json));\n    datamuse\n      .request(\"words?sl=\" + word + \"&max=5\")\n      .then((json) => setSoundsLikeWords(json));\n    datamuse\n      .request(\"words?rel_rhy=\" + word + \"&max=5\")\n      .then((json) => setRhymeWords(json));\n    datamuse\n      .request(\"words?rel_trg=\" + word + \"&max=5\")\n      .then((json) => setTriggerWords(json));\n  };\n  return (\n    <>\n      <div className=\"title\">\n        <h1>Niall's word suggestor</h1>\n        <input ref={wordRef}></input>\n        <button onClick={getWordInfo}>Click me</button>\n      </div>\n      <div className=\"container\">\n        <div>\n          {triggerWords.map((word, i) => (\n            <li key={i}>{word.word}</li>\n          ))}\n        </div>\n        <div>\n          {rhymeWords.map((word, i) => (\n            <li key={i}>{word.word}</li>\n          ))}\n        </div>\n        <div>\n          {soundsLikeWords.map((word, i) => (\n            <li key={i}>{word.word}</li>\n          ))}\n        </div>\n        <div>\n          {meansLikeWords.map((word, i) => (\n            <li key={i}>{word.word}</li>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}