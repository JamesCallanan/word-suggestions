{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["REQUEST_TYPE","App","useState","word","setWord","rhymeWords","setRhymeWords","numRhymeWords","setNumRhymeWords","meansLikeWords","setMeansLikeWords","numMeansLikeWords","setNumMeansLikeWords","soundsLikeWords","setSoundsLikeWords","numSoundsLikeWords","setNumSoundsLikeWords","triggerWords","setTriggerWords","numTriggerWords","setNumTriggerWords","wordRef","useRef","useEffect","getWords","then","json","request_type","amount","a","datamuse","request","response","className","ref","onClick","current","value","Array","isArray","length","prev","disabled","map","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44ec65e6.chunk.js","sourcesContent":["//import logo from \"./logo.svg\";\nimport datamuse from \"datamuse\";\nimport { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\n\nconst REQUEST_TYPE = {\n  SOUNDS_LIKE: \"sl\",\n  MEANS_LIKE: \"ml\",\n  RHYMES_WITH: \"rel_rhy\",\n  TRIGGER_WORDS: \"rel_trg\",\n};\n\nfunction App() {\n  const [word, setWord] = useState([]);\n  const [rhymeWords, setRhymeWords] = useState([]);\n  const [numRhymeWords, setNumRhymeWords] = useState(5);\n  const [meansLikeWords, setMeansLikeWords] = useState([]);\n  const [numMeansLikeWords, setNumMeansLikeWords] = useState(5);\n  const [soundsLikeWords, setSoundsLikeWords] = useState([]);\n  const [numSoundsLikeWords, setNumSoundsLikeWords] = useState(5);\n  const [triggerWords, setTriggerWords] = useState([]);\n  const [numTriggerWords, setNumTriggerWords] = useState(5);\n\n  const wordRef = useRef();\n\n  useEffect(() => {\n    if (word === \"\") return;\n    getWords(word, REQUEST_TYPE.MEANS_LIKE, numMeansLikeWords).then((json) =>\n      setMeansLikeWords(json)\n    );\n    getWords(word, REQUEST_TYPE.SOUNDS_LIKE, numSoundsLikeWords).then((json) =>\n      setSoundsLikeWords(json)\n    );\n    getWords(word, REQUEST_TYPE.RHYMES_WITH, numRhymeWords).then((json) =>\n      setRhymeWords(json)\n    );\n    getWords(word, REQUEST_TYPE.TRIGGER_WORDS, numTriggerWords).then((json) =>\n      setTriggerWords(json)\n    );\n  }, [\n    word,\n    numRhymeWords,\n    numTriggerWords,\n    numMeansLikeWords,\n    numSoundsLikeWords,\n  ]);\n\n  // const getWordInfo = async () => {\n  //   const word = wordRef.current.value;\n  //   if (word === \"\") return;\n  //   getWords(word, REQUEST_TYPE.MEANS_LIKE, 5).then((json) =>\n  //     setMeansLikeWords(json)\n  //   );\n  //   getWords(word, REQUEST_TYPE.SOUNDS_LIKE, 5).then((json) =>\n  //     setSoundsLikeWords(json)\n  //   );\n  //   getWords(word, REQUEST_TYPE.RHYMES_WITH, 5).then((json) =>\n  //     setRhymeWords(json)\n  //   );\n  //   getWords(word, REQUEST_TYPE.TRIGGER_WORDS, 5).then((json) =>\n  //     setTriggerWords(json)\n  //   );\n  // };\n\n  const getWords = async (word, request_type, amount) => {\n    const response = await datamuse.request(\n      `words?${request_type}=${word}&max=${amount}`\n    );\n    return response;\n  };\n\n  return (\n    <>\n      <div className=\"title\">\n        <h1>Niall's word suggestor</h1>\n        <input ref={wordRef}></input>\n        <button onClick={() => setWord(wordRef.current.value)}>Click me</button>\n      </div>\n\n      <div className=\"container\">\n        {Array.isArray(triggerWords) && triggerWords.length ? (\n          <div>\n            <h2>Trigger Words</h2>\n            <button\n              onClick={() => setNumTriggerWords((prev) => prev - 5)}\n              disabled={numTriggerWords === 5}\n            >\n              -\n            </button>\n            <button onClick={() => setNumTriggerWords((prev) => prev + 5)}>\n              +\n            </button>\n            {triggerWords.map((word, i) => (\n              <li key={i}>{word.word}</li>\n            ))}\n          </div>\n        ) : null}\n        {Array.isArray(rhymeWords) && rhymeWords.length ? (\n          <div>\n            <h2>Rhyme Words</h2>\n            <button\n              onClick={() => setNumRhymeWords((prev) => prev - 5)}\n              disabled={numRhymeWords === 5}\n            >\n              -\n            </button>\n            <button onClick={() => setNumRhymeWords((prev) => prev + 5)}>\n              +\n            </button>\n            {rhymeWords.map((word, i) => (\n              <li key={i}>{word.word}</li>\n            ))}\n          </div>\n        ) : null}\n        {Array.isArray(soundsLikeWords) && soundsLikeWords.length ? (\n          <div>\n            <h2>Sounds like Words</h2>\n            <button\n              onClick={() => setNumSoundsLikeWords((prev) => prev - 5)}\n              disabled={numSoundsLikeWords === 5}\n            >\n              -\n            </button>\n            <button onClick={() => setNumSoundsLikeWords((prev) => prev + 5)}>\n              +\n            </button>\n            {soundsLikeWords.map((word, i) => (\n              <li key={i}>{word.word}</li>\n            ))}\n          </div>\n        ) : null}\n        {Array.isArray(meansLikeWords) && meansLikeWords.length ? (\n          <div>\n            <h2>Means like Words</h2>\n            <button\n              onClick={() => setNumMeansLikeWords((prev) => prev - 5)}\n              disabled={numMeansLikeWords === 5}\n            >\n              -\n            </button>\n            <button onClick={() => setNumMeansLikeWords((prev) => prev + 5)}>\n              +\n            </button>\n            {meansLikeWords.map((word, i) => (\n              <li key={i}>{word.word}</li>\n            ))}\n          </div>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}